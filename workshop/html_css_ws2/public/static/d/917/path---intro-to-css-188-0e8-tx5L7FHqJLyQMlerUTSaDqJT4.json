{"data":{"site":{"siteMetadata":{"title":"Intro to Coding: HTML & CSS","author":"Karolin Rafalski"}},"markdownRemark":{"id":"b8aa649a-aed3-5027-8d91-a5ef228efda0","excerpt":"Let’s style our page So far, we created all of our content. But it looks a bit underwhelming. Let’s add some colors and styles! CSS is short for Cascading Style…","html":"<h2>Let’s style our page</h2>\n<p>So far, we created all of our content. But it looks a bit underwhelming. Let’s add some colors and styles!</p>\n<p>CSS is short for Cascading Style Sheets. When you go to a web site and click around multiple pages, you want to have consistent styles. If every page that you made had to be individually styled it would be a lot of work. And any time you make one change, you’d have to go update all the other pages.</p>\n<p>By separating our concerns: content from style we can keep all our style in one place and apply it to all our content.</p>\n<p>The syntax for CSS is different than html.</p>\n<p>Most of if follows a simple pattern</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, you write the <code class=\"language-text\">selector</code>, the <code class=\"language-text\">selector</code> can be the image tag itself, a <code class=\"language-text\">class</code> or <code class=\"language-text\">id</code> (attributes to identify tags) or it can be more complex.</p>\n<p>Then you put a space and then <code class=\"language-text\">curly braces</code> <code class=\"language-text\">{}</code> - they share the key with the <code class=\"language-text\">square brackets</code> <code class=\"language-text\">[]</code>, which are typically above the <code class=\"language-text\">return</code>/<code class=\"language-text\">enter key</code>.</p>\n<p><strong>GOTCHA</strong> - you must always match an opening and a curly brace. Both HTML and CSS fail silently - you won’t get an error message, but things just won’t work. You’ll have to hone your eye for detail as you build your skills.</p>\n<p>Inside the curly braces <code class=\"language-text\">{}</code> you put keys and values.</p>\n<p>In our html elements we did a similar thing with our attributes they had a <code class=\"language-text\">key</code> and a <code class=\"language-text\">value</code></p>\n<p>e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">\\</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>in this case, the attribute has a key of <code class=\"language-text\">type</code> and a value of <code class=\"language-text\">text</code>. The value is always wrapped in quotes.</p>\n<p>CSS follows the same pattern but the syntax is a little bit different</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case we have a key of <code class=\"language-text\">width</code> and a value of <code class=\"language-text\">50%</code> they are separated by a colon <code class=\"language-text\">:</code> and the statement is ended by a semi-colon <code class=\"language-text\">;</code></p>\n<h2>Let’s Code!</h2>\n<p>The first thing we have to do is connect our css file to our <code class=\"language-text\">index.html</code> - if you are using codepen you’re all set you just have to write your css inside the css panel.</p>\n<p>In Atom</p>\n<p>inside our <code class=\"language-text\">index.html</code> inside the <code class=\"language-text\">head</code> tag, add a <code class=\"language-text\">link</code> element. We need two attributes</p>\n<ul>\n<li><code class=\"language-text\">rel</code> short for relationship. It defines how another file is related to our <code class=\"language-text\">html</code> file</li>\n<li>then we need give the location of where our css file is. In our case, it is in the same folder, so it’s really simple to point to it</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Let’s go into our <code class=\"language-text\">css</code> file now and write our first rule</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> plum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If everything is connected and written properly the background color of our webpage should now be plum.</p>\n<p>Fun fact! There are 140 named colors in html. You can go here to explore them</p>\n<p><a href=\"https://htmlcolorcodes.com/color-names/\">https://htmlcolorcodes.com/color-names/</a></p>\n<p>Ultimately, it was decided that naming colors would be too difficult and limiting and there are more modern ways to declare colors like <code class=\"language-text\">hex</code>, <code class=\"language-text\">rgba</code> and <code class=\"language-text\">hsla</code>. However, for code-alongs and learning these names come in really handy.</p>","frontmatter":{"title":"Introduction to HTML","date":"Invalid date"}}},"pageContext":{"slug":"/intro-to-css/","previous":null,"next":{"fields":{"slug":"/hi-folks/"},"frontmatter":{"title":"New Beginnings"}}}}